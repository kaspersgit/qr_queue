Based on the requirements, here are the core classes, functions, and methods that will be necessary:

1. `QueueManager` class:
   - `add_to_queue(phone_id: str) -> None`: Adds a phone to the queue.
   - `remove_from_queue() -> None`: Removes the first phone from the queue.
   - `get_queue() -> List[str]`: Returns the current queue.
   - `get_position(phone_id: str) -> Optional[int]`: Returns the position of a phone in the queue.

2. `QRCodeGenerator` class:
   - `generate_qr_code(data: str, file_path: str) -> None`: Generates a QR code with the given data and saves it to the specified file path.

3. `Server` class:
   - `start() -> None`: Starts the server and listens for incoming requests.
   - `handle_scan_request(phone_id: str) -> None`: Handles the request when a QR code is scanned.

Now, let's proceed with creating the necessary files and implementing the code.

**1. queue_manager.py**

```python
from typing import List, Optional

class QueueManager:
    def __init__(self):
        self.queue = []

    def add_to_queue(self, phone_id: str) -> None:
        if phone_id not in self.queue:
            self.queue.append(phone_id)

    def remove_from_queue(self) -> None:
        if self.queue:
            self.queue.pop(0)

    def get_queue(self) -> List[str]:
        return self.queue

    def get_position(self, phone_id: str) -> Optional[int]:
        if phone_id in self.queue:
            return self.queue.index(phone_id)
        return None
```

**2. qr_code_generator.py**

```python
import qrcode

class QRCodeGenerator:
    def generate_qr_code(self, data: str, file_path: str) -> None:
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(data)
        qr.make(fit=True)
        img = qr.make_image(fill="black", back_color="white")
        img.save(file_path)
```

**3. server.py**

```python
from flask import Flask, request, jsonify
from queue_manager import QueueManager
from qr_code_generator import QRCodeGenerator

app = Flask(__name__)
queue_manager = QueueManager()
qr_code_generator = QRCodeGenerator()

@app.route('/scan', methods=['POST'])
def scan():
    phone_id = request.json.get('phone_id')
    if phone_id:
        queue_manager.add_to_queue(phone_id)
        return jsonify({'message': 'Phone added to the queue.'}), 200
    return jsonify({'message': 'Invalid request.'}), 400

@app.route('/queue', methods=['GET'])
def get_queue():
    return jsonify({'queue': queue_manager.get_queue()}), 200

@app.route('/position', methods=['GET'])
def get_position():
    phone_id = request.args.get('phone_id')
    if phone_id:
        position = queue_manager.get_position(phone_id)
        if position is not None:
            return jsonify({'position': position}), 200
        return jsonify({'message': 'Phone not found in the queue.'}), 404
    return jsonify({'message': 'Invalid request.'}), 400

def remove_first_phone():
    queue_manager.remove_from_queue()

if __name__ == '__main__':
    app.run()

```

This is the basic implementation of the virtual queuing system using Flask and qrcode packages in Python. The `QueueManager` class handles the queue operations, the `QRCodeGenerator` class generates QR codes, and the `Server` class sets up the Flask server and handles the API endpoints.

Please note that this is a simplified implementation and may require additional error handling, input validation, and security measures depending on the specific use case.